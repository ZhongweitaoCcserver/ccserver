// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bankhall.proto

#ifndef PROTOBUF_bankhall_2eproto__INCLUDED
#define PROTOBUF_bankhall_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ccserver {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_bankhall_2eproto();
void protobuf_AssignDesc_bankhall_2eproto();
void protobuf_ShutdownFile_bankhall_2eproto();

class app_inter;
class deposit;
class outs_head;
class outsourcing;
class time_stamp;
class withdraw;

// ===================================================================

class time_stamp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccserver.time_stamp) */ {
 public:
  time_stamp();
  virtual ~time_stamp();

  time_stamp(const time_stamp& from);

  inline time_stamp& operator=(const time_stamp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const time_stamp& default_instance();

  void Swap(time_stamp* other);

  // implements Message ----------------------------------------------

  inline time_stamp* New() const { return New(NULL); }

  time_stamp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const time_stamp& from);
  void MergeFrom(const time_stamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(time_stamp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 stamp = 1;
  void clear_stamp();
  static const int kStampFieldNumber = 1;
  ::google::protobuf::int64 stamp() const;
  void set_stamp(::google::protobuf::int64 value);

  // optional string label = 2;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional string stamp_str = 3;
  void clear_stamp_str();
  static const int kStampStrFieldNumber = 3;
  const ::std::string& stamp_str() const;
  void set_stamp_str(const ::std::string& value);
  void set_stamp_str(const char* value);
  void set_stamp_str(const char* value, size_t size);
  ::std::string* mutable_stamp_str();
  ::std::string* release_stamp_str();
  void set_allocated_stamp_str(::std::string* stamp_str);

  // @@protoc_insertion_point(class_scope:ccserver.time_stamp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 stamp_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr stamp_str_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bankhall_2eproto();
  friend void protobuf_AssignDesc_bankhall_2eproto();
  friend void protobuf_ShutdownFile_bankhall_2eproto();

  void InitAsDefaultInstance();
  static time_stamp* default_instance_;
};
// -------------------------------------------------------------------

class app_inter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccserver.app_inter) */ {
 public:
  app_inter();
  virtual ~app_inter();

  app_inter(const app_inter& from);

  inline app_inter& operator=(const app_inter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const app_inter& default_instance();

  void Swap(app_inter* other);

  // implements Message ----------------------------------------------

  inline app_inter* New() const { return New(NULL); }

  app_inter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const app_inter& from);
  void MergeFrom(const app_inter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(app_inter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 listen_fid = 2;
  void clear_listen_fid();
  static const int kListenFidFieldNumber = 2;
  ::google::protobuf::int32 listen_fid() const;
  void set_listen_fid(::google::protobuf::int32 value);

  // optional sint32 epoll_fid = 3;
  void clear_epoll_fid();
  static const int kEpollFidFieldNumber = 3;
  ::google::protobuf::int32 epoll_fid() const;
  void set_epoll_fid(::google::protobuf::int32 value);

  // optional sint32 conn_fid = 4;
  void clear_conn_fid();
  static const int kConnFidFieldNumber = 4;
  ::google::protobuf::int32 conn_fid() const;
  void set_conn_fid(::google::protobuf::int32 value);

  // optional string cipher = 5;
  void clear_cipher();
  static const int kCipherFieldNumber = 5;
  const ::std::string& cipher() const;
  void set_cipher(const ::std::string& value);
  void set_cipher(const char* value);
  void set_cipher(const char* value, size_t size);
  ::std::string* mutable_cipher();
  ::std::string* release_cipher();
  void set_allocated_cipher(::std::string* cipher);

  // optional string fid_type = 6;
  void clear_fid_type();
  static const int kFidTypeFieldNumber = 6;
  const ::std::string& fid_type() const;
  void set_fid_type(const ::std::string& value);
  void set_fid_type(const char* value);
  void set_fid_type(const char* value, size_t size);
  ::std::string* mutable_fid_type();
  ::std::string* release_fid_type();
  void set_allocated_fid_type(::std::string* fid_type);

  // optional string bussness_name = 7;
  void clear_bussness_name();
  static const int kBussnessNameFieldNumber = 7;
  const ::std::string& bussness_name() const;
  void set_bussness_name(const ::std::string& value);
  void set_bussness_name(const char* value);
  void set_bussness_name(const char* value, size_t size);
  ::std::string* mutable_bussness_name();
  ::std::string* release_bussness_name();
  void set_allocated_bussness_name(::std::string* bussness_name);

  // optional sint32 command = 8;
  void clear_command();
  static const int kCommandFieldNumber = 8;
  ::google::protobuf::int32 command() const;
  void set_command(::google::protobuf::int32 value);

  // optional string args_class = 9;
  void clear_args_class();
  static const int kArgsClassFieldNumber = 9;
  const ::std::string& args_class() const;
  void set_args_class(const ::std::string& value);
  void set_args_class(const char* value);
  void set_args_class(const char* value, size_t size);
  ::std::string* mutable_args_class();
  ::std::string* release_args_class();
  void set_allocated_args_class(::std::string* args_class);

  // optional sint32 args_cont_idx = 10;
  void clear_args_cont_idx();
  static const int kArgsContIdxFieldNumber = 10;
  ::google::protobuf::int32 args_cont_idx() const;
  void set_args_cont_idx(::google::protobuf::int32 value);

  // optional string info = 11;
  void clear_info();
  static const int kInfoFieldNumber = 11;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // optional bytes busness_msg = 14;
  void clear_busness_msg();
  static const int kBusnessMsgFieldNumber = 14;
  const ::std::string& busness_msg() const;
  void set_busness_msg(const ::std::string& value);
  void set_busness_msg(const char* value);
  void set_busness_msg(const void* value, size_t size);
  ::std::string* mutable_busness_msg();
  ::std::string* release_busness_msg();
  void set_allocated_busness_msg(::std::string* busness_msg);

  // repeated .ccserver.time_stamp ts = 15;
  int ts_size() const;
  void clear_ts();
  static const int kTsFieldNumber = 15;
  const ::ccserver::time_stamp& ts(int index) const;
  ::ccserver::time_stamp* mutable_ts(int index);
  ::ccserver::time_stamp* add_ts();
  ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp >*
      mutable_ts();
  const ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp >&
      ts() const;

  // @@protoc_insertion_point(class_scope:ccserver.app_inter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 listen_fid_;
  ::google::protobuf::int32 epoll_fid_;
  ::google::protobuf::internal::ArenaStringPtr cipher_;
  ::google::protobuf::internal::ArenaStringPtr fid_type_;
  ::google::protobuf::int32 conn_fid_;
  ::google::protobuf::int32 command_;
  ::google::protobuf::internal::ArenaStringPtr bussness_name_;
  ::google::protobuf::internal::ArenaStringPtr args_class_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::internal::ArenaStringPtr busness_msg_;
  ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp > ts_;
  ::google::protobuf::int32 args_cont_idx_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bankhall_2eproto();
  friend void protobuf_AssignDesc_bankhall_2eproto();
  friend void protobuf_ShutdownFile_bankhall_2eproto();

  void InitAsDefaultInstance();
  static app_inter* default_instance_;
};
// -------------------------------------------------------------------

class outs_head : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccserver.outs_head) */ {
 public:
  outs_head();
  virtual ~outs_head();

  outs_head(const outs_head& from);

  inline outs_head& operator=(const outs_head& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const outs_head& default_instance();

  void Swap(outs_head* other);

  // implements Message ----------------------------------------------

  inline outs_head* New() const { return New(NULL); }

  outs_head* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const outs_head& from);
  void MergeFrom(const outs_head& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(outs_head* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 feedback_port = 1;
  void clear_feedback_port();
  static const int kFeedbackPortFieldNumber = 1;
  ::google::protobuf::int32 feedback_port() const;
  void set_feedback_port(::google::protobuf::int32 value);

  // optional string feeback_ip = 2;
  void clear_feeback_ip();
  static const int kFeebackIpFieldNumber = 2;
  const ::std::string& feeback_ip() const;
  void set_feeback_ip(const ::std::string& value);
  void set_feeback_ip(const char* value);
  void set_feeback_ip(const char* value, size_t size);
  ::std::string* mutable_feeback_ip();
  ::std::string* release_feeback_ip();
  void set_allocated_feeback_ip(::std::string* feeback_ip);

  // optional string message_id = 3;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 3;
  const ::std::string& message_id() const;
  void set_message_id(const ::std::string& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  ::std::string* mutable_message_id();
  ::std::string* release_message_id();
  void set_allocated_message_id(::std::string* message_id);

  // optional string whoami = 4;
  void clear_whoami();
  static const int kWhoamiFieldNumber = 4;
  const ::std::string& whoami() const;
  void set_whoami(const ::std::string& value);
  void set_whoami(const char* value);
  void set_whoami(const char* value, size_t size);
  ::std::string* mutable_whoami();
  ::std::string* release_whoami();
  void set_allocated_whoami(::std::string* whoami);

  // optional string signature = 5;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string info = 6;
  void clear_info();
  static const int kInfoFieldNumber = 6;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // repeated .ccserver.time_stamp ts = 14;
  int ts_size() const;
  void clear_ts();
  static const int kTsFieldNumber = 14;
  const ::ccserver::time_stamp& ts(int index) const;
  ::ccserver::time_stamp* mutable_ts(int index);
  ::ccserver::time_stamp* add_ts();
  ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp >*
      mutable_ts();
  const ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp >&
      ts() const;

  // @@protoc_insertion_point(class_scope:ccserver.outs_head)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr feeback_ip_;
  ::google::protobuf::internal::ArenaStringPtr message_id_;
  ::google::protobuf::internal::ArenaStringPtr whoami_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp > ts_;
  ::google::protobuf::int32 feedback_port_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bankhall_2eproto();
  friend void protobuf_AssignDesc_bankhall_2eproto();
  friend void protobuf_ShutdownFile_bankhall_2eproto();

  void InitAsDefaultInstance();
  static outs_head* default_instance_;
};
// -------------------------------------------------------------------

class outsourcing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccserver.outsourcing) */ {
 public:
  outsourcing();
  virtual ~outsourcing();

  outsourcing(const outsourcing& from);

  inline outsourcing& operator=(const outsourcing& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const outsourcing& default_instance();

  void Swap(outsourcing* other);

  // implements Message ----------------------------------------------

  inline outsourcing* New() const { return New(NULL); }

  outsourcing* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const outsourcing& from);
  void MergeFrom(const outsourcing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(outsourcing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ccserver.outs_head head = 1;
  int head_size() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::ccserver::outs_head& head(int index) const;
  ::ccserver::outs_head* mutable_head(int index);
  ::ccserver::outs_head* add_head();
  ::google::protobuf::RepeatedPtrField< ::ccserver::outs_head >*
      mutable_head();
  const ::google::protobuf::RepeatedPtrField< ::ccserver::outs_head >&
      head() const;

  // optional bytes data = 15;
  void clear_data();
  static const int kDataFieldNumber = 15;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:ccserver.outsourcing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::ccserver::outs_head > head_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bankhall_2eproto();
  friend void protobuf_AssignDesc_bankhall_2eproto();
  friend void protobuf_ShutdownFile_bankhall_2eproto();

  void InitAsDefaultInstance();
  static outsourcing* default_instance_;
};
// -------------------------------------------------------------------

class withdraw : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccserver.withdraw) */ {
 public:
  withdraw();
  virtual ~withdraw();

  withdraw(const withdraw& from);

  inline withdraw& operator=(const withdraw& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const withdraw& default_instance();

  void Swap(withdraw* other);

  // implements Message ----------------------------------------------

  inline withdraw* New() const { return New(NULL); }

  withdraw* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const withdraw& from);
  void MergeFrom(const withdraw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(withdraw* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string bus_msg_id = 1;
  void clear_bus_msg_id();
  static const int kBusMsgIdFieldNumber = 1;
  const ::std::string& bus_msg_id() const;
  void set_bus_msg_id(const ::std::string& value);
  void set_bus_msg_id(const char* value);
  void set_bus_msg_id(const char* value, size_t size);
  ::std::string* mutable_bus_msg_id();
  ::std::string* release_bus_msg_id();
  void set_allocated_bus_msg_id(::std::string* bus_msg_id);

  // optional string serial_no = 2;
  void clear_serial_no();
  static const int kSerialNoFieldNumber = 2;
  const ::std::string& serial_no() const;
  void set_serial_no(const ::std::string& value);
  void set_serial_no(const char* value);
  void set_serial_no(const char* value, size_t size);
  ::std::string* mutable_serial_no();
  ::std::string* release_serial_no();
  void set_allocated_serial_no(::std::string* serial_no);

  // optional string card_no = 3;
  void clear_card_no();
  static const int kCardNoFieldNumber = 3;
  const ::std::string& card_no() const;
  void set_card_no(const ::std::string& value);
  void set_card_no(const char* value);
  void set_card_no(const char* value, size_t size);
  ::std::string* mutable_card_no();
  ::std::string* release_card_no();
  void set_allocated_card_no(::std::string* card_no);

  // optional sint32 amount = 4;
  void clear_amount();
  static const int kAmountFieldNumber = 4;
  ::google::protobuf::int32 amount() const;
  void set_amount(::google::protobuf::int32 value);

  // optional string customer = 5;
  void clear_customer();
  static const int kCustomerFieldNumber = 5;
  const ::std::string& customer() const;
  void set_customer(const ::std::string& value);
  void set_customer(const char* value);
  void set_customer(const char* value, size_t size);
  ::std::string* mutable_customer();
  ::std::string* release_customer();
  void set_allocated_customer(::std::string* customer);

  // optional string time = 6;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // repeated .ccserver.time_stamp ts = 15;
  int ts_size() const;
  void clear_ts();
  static const int kTsFieldNumber = 15;
  const ::ccserver::time_stamp& ts(int index) const;
  ::ccserver::time_stamp* mutable_ts(int index);
  ::ccserver::time_stamp* add_ts();
  ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp >*
      mutable_ts();
  const ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp >&
      ts() const;

  // @@protoc_insertion_point(class_scope:ccserver.withdraw)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr bus_msg_id_;
  ::google::protobuf::internal::ArenaStringPtr serial_no_;
  ::google::protobuf::internal::ArenaStringPtr card_no_;
  ::google::protobuf::internal::ArenaStringPtr customer_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp > ts_;
  ::google::protobuf::int32 amount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bankhall_2eproto();
  friend void protobuf_AssignDesc_bankhall_2eproto();
  friend void protobuf_ShutdownFile_bankhall_2eproto();

  void InitAsDefaultInstance();
  static withdraw* default_instance_;
};
// -------------------------------------------------------------------

class deposit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccserver.deposit) */ {
 public:
  deposit();
  virtual ~deposit();

  deposit(const deposit& from);

  inline deposit& operator=(const deposit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const deposit& default_instance();

  void Swap(deposit* other);

  // implements Message ----------------------------------------------

  inline deposit* New() const { return New(NULL); }

  deposit* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const deposit& from);
  void MergeFrom(const deposit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(deposit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string bus_msg_id = 1;
  void clear_bus_msg_id();
  static const int kBusMsgIdFieldNumber = 1;
  const ::std::string& bus_msg_id() const;
  void set_bus_msg_id(const ::std::string& value);
  void set_bus_msg_id(const char* value);
  void set_bus_msg_id(const char* value, size_t size);
  ::std::string* mutable_bus_msg_id();
  ::std::string* release_bus_msg_id();
  void set_allocated_bus_msg_id(::std::string* bus_msg_id);

  // optional string serial_no = 2;
  void clear_serial_no();
  static const int kSerialNoFieldNumber = 2;
  const ::std::string& serial_no() const;
  void set_serial_no(const ::std::string& value);
  void set_serial_no(const char* value);
  void set_serial_no(const char* value, size_t size);
  ::std::string* mutable_serial_no();
  ::std::string* release_serial_no();
  void set_allocated_serial_no(::std::string* serial_no);

  // optional string card_no = 3;
  void clear_card_no();
  static const int kCardNoFieldNumber = 3;
  const ::std::string& card_no() const;
  void set_card_no(const ::std::string& value);
  void set_card_no(const char* value);
  void set_card_no(const char* value, size_t size);
  ::std::string* mutable_card_no();
  ::std::string* release_card_no();
  void set_allocated_card_no(::std::string* card_no);

  // optional sint32 amount = 4;
  void clear_amount();
  static const int kAmountFieldNumber = 4;
  ::google::protobuf::int32 amount() const;
  void set_amount(::google::protobuf::int32 value);

  // optional string customer = 5;
  void clear_customer();
  static const int kCustomerFieldNumber = 5;
  const ::std::string& customer() const;
  void set_customer(const ::std::string& value);
  void set_customer(const char* value);
  void set_customer(const char* value, size_t size);
  ::std::string* mutable_customer();
  ::std::string* release_customer();
  void set_allocated_customer(::std::string* customer);

  // optional string time = 6;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // repeated .ccserver.time_stamp ts = 15;
  int ts_size() const;
  void clear_ts();
  static const int kTsFieldNumber = 15;
  const ::ccserver::time_stamp& ts(int index) const;
  ::ccserver::time_stamp* mutable_ts(int index);
  ::ccserver::time_stamp* add_ts();
  ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp >*
      mutable_ts();
  const ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp >&
      ts() const;

  // @@protoc_insertion_point(class_scope:ccserver.deposit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr bus_msg_id_;
  ::google::protobuf::internal::ArenaStringPtr serial_no_;
  ::google::protobuf::internal::ArenaStringPtr card_no_;
  ::google::protobuf::internal::ArenaStringPtr customer_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp > ts_;
  ::google::protobuf::int32 amount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bankhall_2eproto();
  friend void protobuf_AssignDesc_bankhall_2eproto();
  friend void protobuf_ShutdownFile_bankhall_2eproto();

  void InitAsDefaultInstance();
  static deposit* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// time_stamp

// optional sint64 stamp = 1;
inline void time_stamp::clear_stamp() {
  stamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 time_stamp::stamp() const {
  // @@protoc_insertion_point(field_get:ccserver.time_stamp.stamp)
  return stamp_;
}
inline void time_stamp::set_stamp(::google::protobuf::int64 value) {
  
  stamp_ = value;
  // @@protoc_insertion_point(field_set:ccserver.time_stamp.stamp)
}

// optional string label = 2;
inline void time_stamp::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& time_stamp::label() const {
  // @@protoc_insertion_point(field_get:ccserver.time_stamp.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void time_stamp::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.time_stamp.label)
}
inline void time_stamp::set_label(const char* value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.time_stamp.label)
}
inline void time_stamp::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.time_stamp.label)
}
inline ::std::string* time_stamp::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.time_stamp.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* time_stamp::release_label() {
  // @@protoc_insertion_point(field_release:ccserver.time_stamp.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void time_stamp::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:ccserver.time_stamp.label)
}

// optional string stamp_str = 3;
inline void time_stamp::clear_stamp_str() {
  stamp_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& time_stamp::stamp_str() const {
  // @@protoc_insertion_point(field_get:ccserver.time_stamp.stamp_str)
  return stamp_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void time_stamp::set_stamp_str(const ::std::string& value) {
  
  stamp_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.time_stamp.stamp_str)
}
inline void time_stamp::set_stamp_str(const char* value) {
  
  stamp_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.time_stamp.stamp_str)
}
inline void time_stamp::set_stamp_str(const char* value, size_t size) {
  
  stamp_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.time_stamp.stamp_str)
}
inline ::std::string* time_stamp::mutable_stamp_str() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.time_stamp.stamp_str)
  return stamp_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* time_stamp::release_stamp_str() {
  // @@protoc_insertion_point(field_release:ccserver.time_stamp.stamp_str)
  
  return stamp_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void time_stamp::set_allocated_stamp_str(::std::string* stamp_str) {
  if (stamp_str != NULL) {
    
  } else {
    
  }
  stamp_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stamp_str);
  // @@protoc_insertion_point(field_set_allocated:ccserver.time_stamp.stamp_str)
}

// -------------------------------------------------------------------

// app_inter

// optional sint32 listen_fid = 2;
inline void app_inter::clear_listen_fid() {
  listen_fid_ = 0;
}
inline ::google::protobuf::int32 app_inter::listen_fid() const {
  // @@protoc_insertion_point(field_get:ccserver.app_inter.listen_fid)
  return listen_fid_;
}
inline void app_inter::set_listen_fid(::google::protobuf::int32 value) {
  
  listen_fid_ = value;
  // @@protoc_insertion_point(field_set:ccserver.app_inter.listen_fid)
}

// optional sint32 epoll_fid = 3;
inline void app_inter::clear_epoll_fid() {
  epoll_fid_ = 0;
}
inline ::google::protobuf::int32 app_inter::epoll_fid() const {
  // @@protoc_insertion_point(field_get:ccserver.app_inter.epoll_fid)
  return epoll_fid_;
}
inline void app_inter::set_epoll_fid(::google::protobuf::int32 value) {
  
  epoll_fid_ = value;
  // @@protoc_insertion_point(field_set:ccserver.app_inter.epoll_fid)
}

// optional sint32 conn_fid = 4;
inline void app_inter::clear_conn_fid() {
  conn_fid_ = 0;
}
inline ::google::protobuf::int32 app_inter::conn_fid() const {
  // @@protoc_insertion_point(field_get:ccserver.app_inter.conn_fid)
  return conn_fid_;
}
inline void app_inter::set_conn_fid(::google::protobuf::int32 value) {
  
  conn_fid_ = value;
  // @@protoc_insertion_point(field_set:ccserver.app_inter.conn_fid)
}

// optional string cipher = 5;
inline void app_inter::clear_cipher() {
  cipher_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& app_inter::cipher() const {
  // @@protoc_insertion_point(field_get:ccserver.app_inter.cipher)
  return cipher_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void app_inter::set_cipher(const ::std::string& value) {
  
  cipher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.app_inter.cipher)
}
inline void app_inter::set_cipher(const char* value) {
  
  cipher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.app_inter.cipher)
}
inline void app_inter::set_cipher(const char* value, size_t size) {
  
  cipher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.app_inter.cipher)
}
inline ::std::string* app_inter::mutable_cipher() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.app_inter.cipher)
  return cipher_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* app_inter::release_cipher() {
  // @@protoc_insertion_point(field_release:ccserver.app_inter.cipher)
  
  return cipher_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void app_inter::set_allocated_cipher(::std::string* cipher) {
  if (cipher != NULL) {
    
  } else {
    
  }
  cipher_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cipher);
  // @@protoc_insertion_point(field_set_allocated:ccserver.app_inter.cipher)
}

// optional string fid_type = 6;
inline void app_inter::clear_fid_type() {
  fid_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& app_inter::fid_type() const {
  // @@protoc_insertion_point(field_get:ccserver.app_inter.fid_type)
  return fid_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void app_inter::set_fid_type(const ::std::string& value) {
  
  fid_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.app_inter.fid_type)
}
inline void app_inter::set_fid_type(const char* value) {
  
  fid_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.app_inter.fid_type)
}
inline void app_inter::set_fid_type(const char* value, size_t size) {
  
  fid_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.app_inter.fid_type)
}
inline ::std::string* app_inter::mutable_fid_type() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.app_inter.fid_type)
  return fid_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* app_inter::release_fid_type() {
  // @@protoc_insertion_point(field_release:ccserver.app_inter.fid_type)
  
  return fid_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void app_inter::set_allocated_fid_type(::std::string* fid_type) {
  if (fid_type != NULL) {
    
  } else {
    
  }
  fid_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fid_type);
  // @@protoc_insertion_point(field_set_allocated:ccserver.app_inter.fid_type)
}

// optional string bussness_name = 7;
inline void app_inter::clear_bussness_name() {
  bussness_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& app_inter::bussness_name() const {
  // @@protoc_insertion_point(field_get:ccserver.app_inter.bussness_name)
  return bussness_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void app_inter::set_bussness_name(const ::std::string& value) {
  
  bussness_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.app_inter.bussness_name)
}
inline void app_inter::set_bussness_name(const char* value) {
  
  bussness_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.app_inter.bussness_name)
}
inline void app_inter::set_bussness_name(const char* value, size_t size) {
  
  bussness_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.app_inter.bussness_name)
}
inline ::std::string* app_inter::mutable_bussness_name() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.app_inter.bussness_name)
  return bussness_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* app_inter::release_bussness_name() {
  // @@protoc_insertion_point(field_release:ccserver.app_inter.bussness_name)
  
  return bussness_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void app_inter::set_allocated_bussness_name(::std::string* bussness_name) {
  if (bussness_name != NULL) {
    
  } else {
    
  }
  bussness_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bussness_name);
  // @@protoc_insertion_point(field_set_allocated:ccserver.app_inter.bussness_name)
}

// optional sint32 command = 8;
inline void app_inter::clear_command() {
  command_ = 0;
}
inline ::google::protobuf::int32 app_inter::command() const {
  // @@protoc_insertion_point(field_get:ccserver.app_inter.command)
  return command_;
}
inline void app_inter::set_command(::google::protobuf::int32 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:ccserver.app_inter.command)
}

// optional string args_class = 9;
inline void app_inter::clear_args_class() {
  args_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& app_inter::args_class() const {
  // @@protoc_insertion_point(field_get:ccserver.app_inter.args_class)
  return args_class_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void app_inter::set_args_class(const ::std::string& value) {
  
  args_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.app_inter.args_class)
}
inline void app_inter::set_args_class(const char* value) {
  
  args_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.app_inter.args_class)
}
inline void app_inter::set_args_class(const char* value, size_t size) {
  
  args_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.app_inter.args_class)
}
inline ::std::string* app_inter::mutable_args_class() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.app_inter.args_class)
  return args_class_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* app_inter::release_args_class() {
  // @@protoc_insertion_point(field_release:ccserver.app_inter.args_class)
  
  return args_class_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void app_inter::set_allocated_args_class(::std::string* args_class) {
  if (args_class != NULL) {
    
  } else {
    
  }
  args_class_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args_class);
  // @@protoc_insertion_point(field_set_allocated:ccserver.app_inter.args_class)
}

// optional sint32 args_cont_idx = 10;
inline void app_inter::clear_args_cont_idx() {
  args_cont_idx_ = 0;
}
inline ::google::protobuf::int32 app_inter::args_cont_idx() const {
  // @@protoc_insertion_point(field_get:ccserver.app_inter.args_cont_idx)
  return args_cont_idx_;
}
inline void app_inter::set_args_cont_idx(::google::protobuf::int32 value) {
  
  args_cont_idx_ = value;
  // @@protoc_insertion_point(field_set:ccserver.app_inter.args_cont_idx)
}

// optional string info = 11;
inline void app_inter::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& app_inter::info() const {
  // @@protoc_insertion_point(field_get:ccserver.app_inter.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void app_inter::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.app_inter.info)
}
inline void app_inter::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.app_inter.info)
}
inline void app_inter::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.app_inter.info)
}
inline ::std::string* app_inter::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.app_inter.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* app_inter::release_info() {
  // @@protoc_insertion_point(field_release:ccserver.app_inter.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void app_inter::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:ccserver.app_inter.info)
}

// optional bytes busness_msg = 14;
inline void app_inter::clear_busness_msg() {
  busness_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& app_inter::busness_msg() const {
  // @@protoc_insertion_point(field_get:ccserver.app_inter.busness_msg)
  return busness_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void app_inter::set_busness_msg(const ::std::string& value) {
  
  busness_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.app_inter.busness_msg)
}
inline void app_inter::set_busness_msg(const char* value) {
  
  busness_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.app_inter.busness_msg)
}
inline void app_inter::set_busness_msg(const void* value, size_t size) {
  
  busness_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.app_inter.busness_msg)
}
inline ::std::string* app_inter::mutable_busness_msg() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.app_inter.busness_msg)
  return busness_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* app_inter::release_busness_msg() {
  // @@protoc_insertion_point(field_release:ccserver.app_inter.busness_msg)
  
  return busness_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void app_inter::set_allocated_busness_msg(::std::string* busness_msg) {
  if (busness_msg != NULL) {
    
  } else {
    
  }
  busness_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), busness_msg);
  // @@protoc_insertion_point(field_set_allocated:ccserver.app_inter.busness_msg)
}

// repeated .ccserver.time_stamp ts = 15;
inline int app_inter::ts_size() const {
  return ts_.size();
}
inline void app_inter::clear_ts() {
  ts_.Clear();
}
inline const ::ccserver::time_stamp& app_inter::ts(int index) const {
  // @@protoc_insertion_point(field_get:ccserver.app_inter.ts)
  return ts_.Get(index);
}
inline ::ccserver::time_stamp* app_inter::mutable_ts(int index) {
  // @@protoc_insertion_point(field_mutable:ccserver.app_inter.ts)
  return ts_.Mutable(index);
}
inline ::ccserver::time_stamp* app_inter::add_ts() {
  // @@protoc_insertion_point(field_add:ccserver.app_inter.ts)
  return ts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp >*
app_inter::mutable_ts() {
  // @@protoc_insertion_point(field_mutable_list:ccserver.app_inter.ts)
  return &ts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp >&
app_inter::ts() const {
  // @@protoc_insertion_point(field_list:ccserver.app_inter.ts)
  return ts_;
}

// -------------------------------------------------------------------

// outs_head

// optional sint32 feedback_port = 1;
inline void outs_head::clear_feedback_port() {
  feedback_port_ = 0;
}
inline ::google::protobuf::int32 outs_head::feedback_port() const {
  // @@protoc_insertion_point(field_get:ccserver.outs_head.feedback_port)
  return feedback_port_;
}
inline void outs_head::set_feedback_port(::google::protobuf::int32 value) {
  
  feedback_port_ = value;
  // @@protoc_insertion_point(field_set:ccserver.outs_head.feedback_port)
}

// optional string feeback_ip = 2;
inline void outs_head::clear_feeback_ip() {
  feeback_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& outs_head::feeback_ip() const {
  // @@protoc_insertion_point(field_get:ccserver.outs_head.feeback_ip)
  return feeback_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outs_head::set_feeback_ip(const ::std::string& value) {
  
  feeback_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.outs_head.feeback_ip)
}
inline void outs_head::set_feeback_ip(const char* value) {
  
  feeback_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.outs_head.feeback_ip)
}
inline void outs_head::set_feeback_ip(const char* value, size_t size) {
  
  feeback_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.outs_head.feeback_ip)
}
inline ::std::string* outs_head::mutable_feeback_ip() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.outs_head.feeback_ip)
  return feeback_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* outs_head::release_feeback_ip() {
  // @@protoc_insertion_point(field_release:ccserver.outs_head.feeback_ip)
  
  return feeback_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outs_head::set_allocated_feeback_ip(::std::string* feeback_ip) {
  if (feeback_ip != NULL) {
    
  } else {
    
  }
  feeback_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feeback_ip);
  // @@protoc_insertion_point(field_set_allocated:ccserver.outs_head.feeback_ip)
}

// optional string message_id = 3;
inline void outs_head::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& outs_head::message_id() const {
  // @@protoc_insertion_point(field_get:ccserver.outs_head.message_id)
  return message_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outs_head::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.outs_head.message_id)
}
inline void outs_head::set_message_id(const char* value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.outs_head.message_id)
}
inline void outs_head::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.outs_head.message_id)
}
inline ::std::string* outs_head::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.outs_head.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* outs_head::release_message_id() {
  // @@protoc_insertion_point(field_release:ccserver.outs_head.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outs_head::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:ccserver.outs_head.message_id)
}

// optional string whoami = 4;
inline void outs_head::clear_whoami() {
  whoami_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& outs_head::whoami() const {
  // @@protoc_insertion_point(field_get:ccserver.outs_head.whoami)
  return whoami_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outs_head::set_whoami(const ::std::string& value) {
  
  whoami_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.outs_head.whoami)
}
inline void outs_head::set_whoami(const char* value) {
  
  whoami_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.outs_head.whoami)
}
inline void outs_head::set_whoami(const char* value, size_t size) {
  
  whoami_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.outs_head.whoami)
}
inline ::std::string* outs_head::mutable_whoami() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.outs_head.whoami)
  return whoami_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* outs_head::release_whoami() {
  // @@protoc_insertion_point(field_release:ccserver.outs_head.whoami)
  
  return whoami_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outs_head::set_allocated_whoami(::std::string* whoami) {
  if (whoami != NULL) {
    
  } else {
    
  }
  whoami_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), whoami);
  // @@protoc_insertion_point(field_set_allocated:ccserver.outs_head.whoami)
}

// optional string signature = 5;
inline void outs_head::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& outs_head::signature() const {
  // @@protoc_insertion_point(field_get:ccserver.outs_head.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outs_head::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.outs_head.signature)
}
inline void outs_head::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.outs_head.signature)
}
inline void outs_head::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.outs_head.signature)
}
inline ::std::string* outs_head::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.outs_head.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* outs_head::release_signature() {
  // @@protoc_insertion_point(field_release:ccserver.outs_head.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outs_head::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:ccserver.outs_head.signature)
}

// optional string info = 6;
inline void outs_head::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& outs_head::info() const {
  // @@protoc_insertion_point(field_get:ccserver.outs_head.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outs_head::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.outs_head.info)
}
inline void outs_head::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.outs_head.info)
}
inline void outs_head::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.outs_head.info)
}
inline ::std::string* outs_head::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.outs_head.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* outs_head::release_info() {
  // @@protoc_insertion_point(field_release:ccserver.outs_head.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outs_head::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:ccserver.outs_head.info)
}

// repeated .ccserver.time_stamp ts = 14;
inline int outs_head::ts_size() const {
  return ts_.size();
}
inline void outs_head::clear_ts() {
  ts_.Clear();
}
inline const ::ccserver::time_stamp& outs_head::ts(int index) const {
  // @@protoc_insertion_point(field_get:ccserver.outs_head.ts)
  return ts_.Get(index);
}
inline ::ccserver::time_stamp* outs_head::mutable_ts(int index) {
  // @@protoc_insertion_point(field_mutable:ccserver.outs_head.ts)
  return ts_.Mutable(index);
}
inline ::ccserver::time_stamp* outs_head::add_ts() {
  // @@protoc_insertion_point(field_add:ccserver.outs_head.ts)
  return ts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp >*
outs_head::mutable_ts() {
  // @@protoc_insertion_point(field_mutable_list:ccserver.outs_head.ts)
  return &ts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp >&
outs_head::ts() const {
  // @@protoc_insertion_point(field_list:ccserver.outs_head.ts)
  return ts_;
}

// -------------------------------------------------------------------

// outsourcing

// repeated .ccserver.outs_head head = 1;
inline int outsourcing::head_size() const {
  return head_.size();
}
inline void outsourcing::clear_head() {
  head_.Clear();
}
inline const ::ccserver::outs_head& outsourcing::head(int index) const {
  // @@protoc_insertion_point(field_get:ccserver.outsourcing.head)
  return head_.Get(index);
}
inline ::ccserver::outs_head* outsourcing::mutable_head(int index) {
  // @@protoc_insertion_point(field_mutable:ccserver.outsourcing.head)
  return head_.Mutable(index);
}
inline ::ccserver::outs_head* outsourcing::add_head() {
  // @@protoc_insertion_point(field_add:ccserver.outsourcing.head)
  return head_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ccserver::outs_head >*
outsourcing::mutable_head() {
  // @@protoc_insertion_point(field_mutable_list:ccserver.outsourcing.head)
  return &head_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ccserver::outs_head >&
outsourcing::head() const {
  // @@protoc_insertion_point(field_list:ccserver.outsourcing.head)
  return head_;
}

// optional bytes data = 15;
inline void outsourcing::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& outsourcing::data() const {
  // @@protoc_insertion_point(field_get:ccserver.outsourcing.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outsourcing::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.outsourcing.data)
}
inline void outsourcing::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.outsourcing.data)
}
inline void outsourcing::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.outsourcing.data)
}
inline ::std::string* outsourcing::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.outsourcing.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* outsourcing::release_data() {
  // @@protoc_insertion_point(field_release:ccserver.outsourcing.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outsourcing::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ccserver.outsourcing.data)
}

// -------------------------------------------------------------------

// withdraw

// optional string bus_msg_id = 1;
inline void withdraw::clear_bus_msg_id() {
  bus_msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& withdraw::bus_msg_id() const {
  // @@protoc_insertion_point(field_get:ccserver.withdraw.bus_msg_id)
  return bus_msg_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void withdraw::set_bus_msg_id(const ::std::string& value) {
  
  bus_msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.withdraw.bus_msg_id)
}
inline void withdraw::set_bus_msg_id(const char* value) {
  
  bus_msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.withdraw.bus_msg_id)
}
inline void withdraw::set_bus_msg_id(const char* value, size_t size) {
  
  bus_msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.withdraw.bus_msg_id)
}
inline ::std::string* withdraw::mutable_bus_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.withdraw.bus_msg_id)
  return bus_msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* withdraw::release_bus_msg_id() {
  // @@protoc_insertion_point(field_release:ccserver.withdraw.bus_msg_id)
  
  return bus_msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void withdraw::set_allocated_bus_msg_id(::std::string* bus_msg_id) {
  if (bus_msg_id != NULL) {
    
  } else {
    
  }
  bus_msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bus_msg_id);
  // @@protoc_insertion_point(field_set_allocated:ccserver.withdraw.bus_msg_id)
}

// optional string serial_no = 2;
inline void withdraw::clear_serial_no() {
  serial_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& withdraw::serial_no() const {
  // @@protoc_insertion_point(field_get:ccserver.withdraw.serial_no)
  return serial_no_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void withdraw::set_serial_no(const ::std::string& value) {
  
  serial_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.withdraw.serial_no)
}
inline void withdraw::set_serial_no(const char* value) {
  
  serial_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.withdraw.serial_no)
}
inline void withdraw::set_serial_no(const char* value, size_t size) {
  
  serial_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.withdraw.serial_no)
}
inline ::std::string* withdraw::mutable_serial_no() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.withdraw.serial_no)
  return serial_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* withdraw::release_serial_no() {
  // @@protoc_insertion_point(field_release:ccserver.withdraw.serial_no)
  
  return serial_no_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void withdraw::set_allocated_serial_no(::std::string* serial_no) {
  if (serial_no != NULL) {
    
  } else {
    
  }
  serial_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_no);
  // @@protoc_insertion_point(field_set_allocated:ccserver.withdraw.serial_no)
}

// optional string card_no = 3;
inline void withdraw::clear_card_no() {
  card_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& withdraw::card_no() const {
  // @@protoc_insertion_point(field_get:ccserver.withdraw.card_no)
  return card_no_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void withdraw::set_card_no(const ::std::string& value) {
  
  card_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.withdraw.card_no)
}
inline void withdraw::set_card_no(const char* value) {
  
  card_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.withdraw.card_no)
}
inline void withdraw::set_card_no(const char* value, size_t size) {
  
  card_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.withdraw.card_no)
}
inline ::std::string* withdraw::mutable_card_no() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.withdraw.card_no)
  return card_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* withdraw::release_card_no() {
  // @@protoc_insertion_point(field_release:ccserver.withdraw.card_no)
  
  return card_no_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void withdraw::set_allocated_card_no(::std::string* card_no) {
  if (card_no != NULL) {
    
  } else {
    
  }
  card_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_no);
  // @@protoc_insertion_point(field_set_allocated:ccserver.withdraw.card_no)
}

// optional sint32 amount = 4;
inline void withdraw::clear_amount() {
  amount_ = 0;
}
inline ::google::protobuf::int32 withdraw::amount() const {
  // @@protoc_insertion_point(field_get:ccserver.withdraw.amount)
  return amount_;
}
inline void withdraw::set_amount(::google::protobuf::int32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:ccserver.withdraw.amount)
}

// optional string customer = 5;
inline void withdraw::clear_customer() {
  customer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& withdraw::customer() const {
  // @@protoc_insertion_point(field_get:ccserver.withdraw.customer)
  return customer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void withdraw::set_customer(const ::std::string& value) {
  
  customer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.withdraw.customer)
}
inline void withdraw::set_customer(const char* value) {
  
  customer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.withdraw.customer)
}
inline void withdraw::set_customer(const char* value, size_t size) {
  
  customer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.withdraw.customer)
}
inline ::std::string* withdraw::mutable_customer() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.withdraw.customer)
  return customer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* withdraw::release_customer() {
  // @@protoc_insertion_point(field_release:ccserver.withdraw.customer)
  
  return customer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void withdraw::set_allocated_customer(::std::string* customer) {
  if (customer != NULL) {
    
  } else {
    
  }
  customer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer);
  // @@protoc_insertion_point(field_set_allocated:ccserver.withdraw.customer)
}

// optional string time = 6;
inline void withdraw::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& withdraw::time() const {
  // @@protoc_insertion_point(field_get:ccserver.withdraw.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void withdraw::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.withdraw.time)
}
inline void withdraw::set_time(const char* value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.withdraw.time)
}
inline void withdraw::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.withdraw.time)
}
inline ::std::string* withdraw::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.withdraw.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* withdraw::release_time() {
  // @@protoc_insertion_point(field_release:ccserver.withdraw.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void withdraw::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:ccserver.withdraw.time)
}

// repeated .ccserver.time_stamp ts = 15;
inline int withdraw::ts_size() const {
  return ts_.size();
}
inline void withdraw::clear_ts() {
  ts_.Clear();
}
inline const ::ccserver::time_stamp& withdraw::ts(int index) const {
  // @@protoc_insertion_point(field_get:ccserver.withdraw.ts)
  return ts_.Get(index);
}
inline ::ccserver::time_stamp* withdraw::mutable_ts(int index) {
  // @@protoc_insertion_point(field_mutable:ccserver.withdraw.ts)
  return ts_.Mutable(index);
}
inline ::ccserver::time_stamp* withdraw::add_ts() {
  // @@protoc_insertion_point(field_add:ccserver.withdraw.ts)
  return ts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp >*
withdraw::mutable_ts() {
  // @@protoc_insertion_point(field_mutable_list:ccserver.withdraw.ts)
  return &ts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp >&
withdraw::ts() const {
  // @@protoc_insertion_point(field_list:ccserver.withdraw.ts)
  return ts_;
}

// -------------------------------------------------------------------

// deposit

// optional string bus_msg_id = 1;
inline void deposit::clear_bus_msg_id() {
  bus_msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deposit::bus_msg_id() const {
  // @@protoc_insertion_point(field_get:ccserver.deposit.bus_msg_id)
  return bus_msg_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deposit::set_bus_msg_id(const ::std::string& value) {
  
  bus_msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.deposit.bus_msg_id)
}
inline void deposit::set_bus_msg_id(const char* value) {
  
  bus_msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.deposit.bus_msg_id)
}
inline void deposit::set_bus_msg_id(const char* value, size_t size) {
  
  bus_msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.deposit.bus_msg_id)
}
inline ::std::string* deposit::mutable_bus_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.deposit.bus_msg_id)
  return bus_msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deposit::release_bus_msg_id() {
  // @@protoc_insertion_point(field_release:ccserver.deposit.bus_msg_id)
  
  return bus_msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deposit::set_allocated_bus_msg_id(::std::string* bus_msg_id) {
  if (bus_msg_id != NULL) {
    
  } else {
    
  }
  bus_msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bus_msg_id);
  // @@protoc_insertion_point(field_set_allocated:ccserver.deposit.bus_msg_id)
}

// optional string serial_no = 2;
inline void deposit::clear_serial_no() {
  serial_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deposit::serial_no() const {
  // @@protoc_insertion_point(field_get:ccserver.deposit.serial_no)
  return serial_no_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deposit::set_serial_no(const ::std::string& value) {
  
  serial_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.deposit.serial_no)
}
inline void deposit::set_serial_no(const char* value) {
  
  serial_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.deposit.serial_no)
}
inline void deposit::set_serial_no(const char* value, size_t size) {
  
  serial_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.deposit.serial_no)
}
inline ::std::string* deposit::mutable_serial_no() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.deposit.serial_no)
  return serial_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deposit::release_serial_no() {
  // @@protoc_insertion_point(field_release:ccserver.deposit.serial_no)
  
  return serial_no_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deposit::set_allocated_serial_no(::std::string* serial_no) {
  if (serial_no != NULL) {
    
  } else {
    
  }
  serial_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_no);
  // @@protoc_insertion_point(field_set_allocated:ccserver.deposit.serial_no)
}

// optional string card_no = 3;
inline void deposit::clear_card_no() {
  card_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deposit::card_no() const {
  // @@protoc_insertion_point(field_get:ccserver.deposit.card_no)
  return card_no_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deposit::set_card_no(const ::std::string& value) {
  
  card_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.deposit.card_no)
}
inline void deposit::set_card_no(const char* value) {
  
  card_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.deposit.card_no)
}
inline void deposit::set_card_no(const char* value, size_t size) {
  
  card_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.deposit.card_no)
}
inline ::std::string* deposit::mutable_card_no() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.deposit.card_no)
  return card_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deposit::release_card_no() {
  // @@protoc_insertion_point(field_release:ccserver.deposit.card_no)
  
  return card_no_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deposit::set_allocated_card_no(::std::string* card_no) {
  if (card_no != NULL) {
    
  } else {
    
  }
  card_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_no);
  // @@protoc_insertion_point(field_set_allocated:ccserver.deposit.card_no)
}

// optional sint32 amount = 4;
inline void deposit::clear_amount() {
  amount_ = 0;
}
inline ::google::protobuf::int32 deposit::amount() const {
  // @@protoc_insertion_point(field_get:ccserver.deposit.amount)
  return amount_;
}
inline void deposit::set_amount(::google::protobuf::int32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:ccserver.deposit.amount)
}

// optional string customer = 5;
inline void deposit::clear_customer() {
  customer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deposit::customer() const {
  // @@protoc_insertion_point(field_get:ccserver.deposit.customer)
  return customer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deposit::set_customer(const ::std::string& value) {
  
  customer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.deposit.customer)
}
inline void deposit::set_customer(const char* value) {
  
  customer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.deposit.customer)
}
inline void deposit::set_customer(const char* value, size_t size) {
  
  customer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.deposit.customer)
}
inline ::std::string* deposit::mutable_customer() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.deposit.customer)
  return customer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deposit::release_customer() {
  // @@protoc_insertion_point(field_release:ccserver.deposit.customer)
  
  return customer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deposit::set_allocated_customer(::std::string* customer) {
  if (customer != NULL) {
    
  } else {
    
  }
  customer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer);
  // @@protoc_insertion_point(field_set_allocated:ccserver.deposit.customer)
}

// optional string time = 6;
inline void deposit::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deposit::time() const {
  // @@protoc_insertion_point(field_get:ccserver.deposit.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deposit::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccserver.deposit.time)
}
inline void deposit::set_time(const char* value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccserver.deposit.time)
}
inline void deposit::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccserver.deposit.time)
}
inline ::std::string* deposit::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:ccserver.deposit.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deposit::release_time() {
  // @@protoc_insertion_point(field_release:ccserver.deposit.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deposit::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:ccserver.deposit.time)
}

// repeated .ccserver.time_stamp ts = 15;
inline int deposit::ts_size() const {
  return ts_.size();
}
inline void deposit::clear_ts() {
  ts_.Clear();
}
inline const ::ccserver::time_stamp& deposit::ts(int index) const {
  // @@protoc_insertion_point(field_get:ccserver.deposit.ts)
  return ts_.Get(index);
}
inline ::ccserver::time_stamp* deposit::mutable_ts(int index) {
  // @@protoc_insertion_point(field_mutable:ccserver.deposit.ts)
  return ts_.Mutable(index);
}
inline ::ccserver::time_stamp* deposit::add_ts() {
  // @@protoc_insertion_point(field_add:ccserver.deposit.ts)
  return ts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp >*
deposit::mutable_ts() {
  // @@protoc_insertion_point(field_mutable_list:ccserver.deposit.ts)
  return &ts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ccserver::time_stamp >&
deposit::ts() const {
  // @@protoc_insertion_point(field_list:ccserver.deposit.ts)
  return ts_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ccserver

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bankhall_2eproto__INCLUDED
